{"home":{"content":"# NEOS: Interactivity\n---\n\nHello, Wrold!\n\nWelcome to Lecture 2 of **NEOS**. Today we will be talking about how to add interactivity to our webpages.\n\nBe sure to hit me up on **[slack](https://neoschat.slack.com/messages/general/)** if you've any questions!\n\n#### Main Goals\n---\n\n1. Review CSS selectors\n2. Learn basics of programming\n3. Add functional interactivity with jQuery\n\n#### Game Plan\n---\n\n#### [Warmup](#warmup)\n#### [CSS Review](#css-review)\n#### [Responsive](#responsive)\n#### [Programming Basics](#programming)\n#### [jQuery Plugins](#jquery-plugins)\n#### [Common UIs](#common-uis)\n\n","idx":0},"title":{"content":"NEOS: Interactivity","idx":1},"desc":{"content":"Introduction to programming with javascript","idx":2},"warmup":{"content":"# Warmup\n---\n\nLet's begin with a simple exercise.\n\n#### Exercise\n---\n\nGo **[here](https://github.com/mottaquikarim/Spiderman)**.\n\nSee the big green button on the right? Click on it and **download zip**.\n\nTo that code, in **index.awesome.html**, add the following:\n\n<img style=\"width: 100%; height: auto;\" src=\"https://raw.githubusercontent.com/mottaquikarim/NEOSLecture2/master/column-grid-example.png\">\n\nYour version doesn't have to look exactly like this, but be sure to include:\n\n1. Three columns in a row\n2. Buttons on the bottom\n3. Icons on top\n\n**Stretch Goals**: make them stack if the page width is too small...\n\n#### Inspiration\n---\n\nHere's some landing page inspiration.\n\n* [Operator](https://operator.com/)\n* [okmylo](http://okmylo.com/)\n* [moments](http://momentsapp.com/)\n* [trippeo](https://www.trippeo.com/) \n* **[kong](https://kong.wtf/)**\n* [stripe](https://stripe.com/)\n* [neubible](http://neubible.co/)\n* **[flyosity](http://flyosity.com/filters/)**\n* [todoist](https://todoist.com/iphone)\n* **[gameit](http://gameit.us/)**\n* [qapital](https://www.qapital.com/)\n* [urban walks](http://urban-walks.com/#nicer_way)\n*  **[quizup](https://www.quizup.com/en)**","idx":3},"css-review":{"content":"# CSS Review\n---\n\n**Learning Objective**: Understand the implementation of CSS3 as a technique for enhancing user experience.\n\n#### Problems 1 - 4\n---\n#### Log in to [Samantha](http://samantha.fewd.us/#/) First!\n\nThen, given the following pages, please complete the task outlined.\n\n#### [CSS Tag Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Tag_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Tag_Selectors)\n\n#### [CSS Class Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_Class_Selectors_2) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_Class_Selectors_2)\n\n#### [CSS ID Selectors](http://samantha.fewd.us/#fork/mottaquikarim/CSS_ID_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/CSS_ID_Selectors)\n\n#### [Complex CSS Selectors](http://samantha.fewd.us/#fork/mottaquikarim/Complex_CSS_Selectors) | [LIVE Instructor Version](http://samantha.fewd.us/#broadcast/mottaquikarim/Complex_CSS_Selectors)\n\n---\n\n\nLet's talk about **CSS**, or **Cascading Style Sheets**, the language that allows us to define styles and adjustments to default content on our webpages.\n\n\n### Basic Definition\n---\n\nMethod for searching your html tags efficiently and styling the results it finds.\n\n** Three ways to CSS **\n\n1. This way is evil, we won't even talk about it.\n2. This way is also not very good, we won't even talk about it.\n3. This way is ideal! let's discuss how to link in external files to your index.html...\n\n** Selectors **\n\n**SELECTOR**: a keyword used to query your html tags, classes, ids -- (the last two are html attributes)\n\n**RULES**: the style attributes you are going to set\n\n**[Exhaustive list of CSS properties and values](http://www.w3schools.com/cssref/)**\n\n#### CSS Use Cases\n---\n\nHere are some interesting use cases where CSS3 in particular becomes super handy.\n\n#### Animations\n---\n\nYou can do some really awesome work with animating your elements.\n\n* **[Spinner](http://fewd.us/howdoi/#/problem/42730)**\n\n* **[Repeating, multiple animations](http://fewd.us/howdoi/#/problem/4270)**\n\n#### Transitions\n---\n\nTransitions are animations that are triggered usually by some form of user interaction.\n\n* **[Hover Effects](http://fewd.us/howdoi/#/problem/4268)**\n\n#### Pseudo Selectors\n---\n\nPsuedo classes allow us to style specific types of element features, **i.e.** the **:hover** pseudo selector can be used to style an element as the user puts his mouse over it.\n\n* **[Menu Hover Effect](http://fewd.us/howdoi/#/problem/4957)**\n\nOther examples of pseudo selectors: **:visited**, **:after**, etc\n\n#### Overflows\n---\n\nKeep track of content and determine how it should behave if there is more content than space in the container.\n\n* **[Overflow Example](http://fewd.us/howdoi/#/problem/4165)**\n\n#### Grids\n---\n\nThis one is super expansive and you could literally teach an entire course on this. For now, take a look at a few examples / problems to gain perspective on this.\n\n* **[Vertically and Horizontally Center](http://fewd.us/jargon/#/problem/10099)**\n\n* **[Three Column Grid](http://fewd.us/howdoi/#/problem/4258)**\n\n* **[Flex Align/Justify](http://fewd.us/jargon/#/problem/10100)**\n\n* **[Flex Direction](http://fewd.us/jargon/#/problem/10097)**\n\n* **[Flex Wrap](http://fewd.us/jargon/#/problem/10098)**\n\n#### References\n---\n1. **[Exhaustive Guide to Flex](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)**\n2. **[CSS Animations Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)**\n3. \n**[Exhaustive list of CSS properties and values](http://www.w3schools.com/cssref/)**\n4. **[Exhaustive list of CSS3 properties](http://www.tutorialrepublic.com/css-reference/css3-properties.php)**\n","idx":4},"responsive":{"content":"# Styling for various Screens\n---\n\n**Learning Objective**: Understand how to apply CSS towards building web layouts that work in multiple screens.\n\n#### Exercise\n---\n\nLet's update the image on our Spiderman page to be something else if the page width is **< 600px**.\n\n---\n\nWe can write CSS that will allow us to format our data layouts so that it adheres properly to multiple screen sizes.\n\n#### Basics\n---\n* We want to have the SAME markup for ALL of our webviews\n* A website is responsive if the site layout changes based on the width of the browser pages but can compensate for any width.\n* A website is adaptive if the site layout changes based on the width of the browser but only for predetermined widths.\n* [Examples](http://socialdriver.com/2013/06/10/50-best-responsive-website-design-examples-of-2013/) of responsive sites\n* Always place this in your HTML\n\n```html\n<html>\n    <head>\n        ...\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0;\">\n        ...\n    </head>\n    ...\n</html>\n```\n\n#### Mobile First VS. Desktop First\n---\nThese two schemas are techniques for how we structure our css.\n\n**Most important takeaway**: almost always go with mobile first.\n\n \n* Remember, CSS is cascading which means that we can write one set of styles and then reapply other styles on top of that.\n\n#### Mobile First\n\nWith mobile first, we create the mobile layout first, then add a media query for tablet (with tablet styles) and then add a media query for desktop (with desktop styles)\n\n#### Desktop First\n\nWith desktop first, we create the desktop layout first (so styles for desktop), then add a media query for tablet, then mobile.\n\n#### Mobile First > Desktop First\n**Here's why**:\nforces you to think about the stuff that's really necessary for simplest version of your page and implement those\n\n\n* With mobile first, you simply add styles as needed as width increases (vs removing styles the other way around, which leads to writing more code)\n\n#### Examples\n---\nHere are some examples of different media queries.\n\n* #### [Basic Example; Mobile first](http://fewd.us/howdoi/#/problem/4080)\n\n* #### [Basic; Desktop first](http://fewd.us/howdoi/#/problem/4081)\n\n* #### [AND-ing](http://fewd.us/howdoi/#/problem/4082)\n\n* #### [OR-ing](http://fewd.us/howdoi/#/problem/4083)\n\n* #### [Buckets](http://fewd.us/howdoi/#/problem/4084)\n\n* #### [Overriding](http://fewd.us/howdoi/#/problem/4085)\n\n#### Common Breakpoints\n---\n**NOTE**: you should **NEVER** design for device specificity. Read [this](https://responsivedesign.is/articles/why-you-dont-need-device-specific-breakpoints).\n\n```css\n/* Smartphones (portrait and landscape) ----------- */\n@media only screen and (min-device-width : 320px) and (max-device-width : 480px) {\n/* Styles */\n}\n\n/* Smartphones (landscape) ----------- */\n@media only screen and (min-width : 321px) {\n/* Styles */\n}\n\n/* Smartphones (portrait) ----------- */\n@media only screen and (max-width : 320px) {\n/* Styles */\n}\n\n/* iPads (portrait and landscape) ----------- */\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) {\n/* Styles */\n}\n\n/* iPads (landscape) ----------- */\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) {\n/* Styles */\n}\n\n/* iPads (portrait) ----------- */\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) {\n/* Styles */\n}\n/**********\niPad 3\n**********/\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n\n@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n/* Desktops and laptops ----------- */\n@media only screen  and (min-width : 1224px) {\n/* Styles */\n}\n\n/* Large screens ----------- */\n@media only screen  and (min-width : 1824px) {\n/* Styles */\n}\n\n/* iPhone 4 ----------- */\n@media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : landscape) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n\n@media only screen and (min-device-width : 320px) and (max-device-width : 480px) and (orientation : portrait) and (-webkit-min-device-pixel-ratio : 2) {\n/* Styles */\n}\n\n/* iPhone 5 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 568px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* iPhone 6 ----------- */\n@media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 375px) and (max-device-height: 667px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* iPhone 6+ ----------- */\n@media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 414px) and (max-device-height: 736px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* Samsung Galaxy S3 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 2){\n/* Styles */\n}\n\n/* Samsung Galaxy S4 ----------- */\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 320px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n\n/* Samsung Galaxy S5 ----------- */\n@media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation : landscape) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n\n@media only screen and (min-device-width: 360px) and (max-device-height: 640px) and (orientation : portrait) and (-webkit-device-pixel-ratio: 3){\n/* Styles */\n}\n```\n","idx":5},"programming-basics":{"content":"# Programming Basics\n---\n\nLet's begin by defining what javascript actually is, how we can load javascript into our webpages, and how we can write a few lines of super basic javascript syntax.\n\n#### Learning Objectives\n---\n1. What can we do with javascript code?\n2. How can we load javascript code into our browser?\n3. What are the different ways we can store, retrieve, and use data in javascript?\n\n#### Exercise\n---\n\nWe want to learn enough javascript to be able to solve the following PSET.\n\n#### [Basic Vars Review](http://samantha.fewd.us/#fork/mottaquikarim/Basic_Vars_Review) | [LIVE Instructor View](http://samantha.fewd.us/#broadcast/mottaquikarim/Basic_Vars_Review)\n\nThis will help you get your fingers warm re: simple javascript variable declarations.\n\n#### [PSET - Functions](http://samantha.fewd.us/#fork/mottaquikarim/Functions_Practice) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Functions_Practice)\nWe will attempt to solve some or MOST of them.\n\n#### [PSET - Conditionals](http://samantha.fewd.us/#fork/mottaquikarim/Conditionals) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Conditionals)\nTry to solve all of these\n\n#### [Problem - Calculate Grade](http://samantha.fewd.us/#fork/mottaquikarim/Calculate_Grade) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Calculate_Grade)\nThis one is more difficult, try it out though!\n\n#### What is JavaScript\n---\nOriginally called **Mocha**, then **LiveScript**, then renamed to **JavaScript**.\n\n2. It's a subclass of ECMAScript, a standardization maintained by Ecma International\n3. Basically, Ecma is the **Webster's Dictionary** of JavaScript\n\n### What can you do with Javascript?\n\nJavaScript runs in the <strong>browser</strong>, meaning it is used heavily in user-interaction.\nIn other words, with javascript, you can...\n\n#### [Animate stuff](http://codepen.io/mottaquikarim/pen/DABIG)\n---\nYou can use javascript to create for example an infinite random prop loop.\n\n\n#### [Allow the user to control stuff](http://jsfiddle.net/2jwnjwfd/1/?utm_source=website&utm_medium=embed&utm_campaign=2jwnjwfd)\n---\nYou can allow the user to take control of a UI element and dictate its state.\n\n\n#### [Mess with people's minds](http://codepen.io/mottaquikarim/pen/DABIG)\n---\nThis is just a pretty cool masking example that is actually pretty hard to pull off with web dev tech (but can be done, as shown here thanks to javascript).\n\n(**FYI**: this formed the basis of [this website](http://maveron.com/) that I built back in the day).\n\n\n\n#### [Determine the state of something on a page in real time](http://jsfiddle.net/hrfq4qrj/1/?utm_source=website&utm_medium=embed&utm_campaign=hrfq4qrj)\n---\nWe are using something called conditionals here.\n\n#### Load in data dynamically (this is the best one)\n---\nBasically, we can interact with API data without ever reloading the page!\n\n#### Linking to Javascript\n---\nBefore we begin, let us do some basic bookkeepping.\n\n**How do we set up javascript to run in the browser?**\n\n1. The precedent is similar to what we do to link CSS files &mdash; we employ a tag to tell the HTML page where the javascript code for that page lives.\n\n2. However, we do NOT use the link tag...\n\n3. Instead, we do the following:\n\n```html\n<!doctype html>\n<html>\n\t<head>\n\t\t<!-- Do NOT link to your javascript here -->\n\t</head>\n\t<body>\n\n\t\t<script src=\"PATH_TO_YOUR_JS_FILE\"></script>\n\t</body>\n</html>\n```\n\n**NOTE the `<script>` tag**\n\n1. This is a new tag we have never seen before; remember that the `<link>` tag is for CSS files and the `<script>` tag is for javascript files (for now).\n2. the `src` attribute is what we use to link to the external js file\n3. remember to CLOSE your script tag, unlike the `<link>` tag, `<script>` is NOT self closing!\n\n**Commenting + ( basic debugging of ) code in JavaScript**\n\n```js\n\n// this is an inline comment\n\nconsole.log('You can write debugging statements like so');\n\n/*\n\tthis\n\t\tis\n\t\t\ta\n\t\t\t\tmultilined\n\t\t\t\t\t\tcomment\n*/\n```\n#### Types of Variables\n---\n\nA variable type is a way to classify the different kinds of data we can save to a variable. There are exactly 6 types of variables:\n\n#### Primitives\n\n* `undefined`\n* `null`\n* boolean\n* number\n* string\n\n#### Non Primitive\n\n* Object\n\n### Primitives\n\nA Primitive type is a most basic bit of information that you can store. For example, a number is a primitive because it cannot be made up of any of the other types of variables\n\n<strong>Alternate definition</strong>: Think of this as an atom -- atoms are atoms because we cannot break them down into any more basic bits, same goes for primitives\n\n#### `undefined`\n\nUndefined is the default state of any variable. Basically means the variable is empty or has not yet been assigned a value, primitive or otherwise\n\n#### `null`\n\nThe null variable is different from the `undefined` type, but only subtly so.\n\n1. the `null` type is assigned to a variable, but its \"value\" is empty.\n2. the `undefined` type is by default the value of each variable that is declared but not defined\n3. &#35;esoteric\n\n**[Example](http://fewd.us/howdoi/#/problem/5131)**\n\n#### Booleans\n\nTrue or false. Basically.\n\n```javascript\nvar myBooleanValue = true; // true\nvar myBooleanValueThatIsFalse = false; // false\nconsole.log( typeof myBooleanValue );\n```\n\n#### Numbers\n\nNumeric values that can be operated upon via the standard rules of arithmetic.\n\n```javascript\nvar myNumber = 1;\nvar pi = 3.14159; // ...approximately\n```\n\n\n#### Strings\n\nThis one is interesting, we use this to represent text. Anything between the quotations (double or single, doesn't matter as long as you are consistent) is treated as a number.\n\nSo...\n\n```javascript\nvar myName = 'Taq Karim';\nvar dudeThisIsAString = '105';\n\nvar doubleQuotesRCool2 = \"Look ma! I'm double quoted\";\n```\n\n### Non-Primitives or: how I learned to stop worrying and Love the Object.\n\nObjects are the bees-knees yo.\n\n<div>Seriously.</div>\n\n<strong>Objects are a collection of properties where each property is a primitive type</strong>.\n\n#### In other words...\n```javascript\n// just primitives\nvar someNumber = 1;\nvar someBool = false;\nvar someNullItem = null;\n\n\n// as an object...\nvar myObject = {\n\tsomeNumber: 1\n\t, someBool: false\n\t, someNullItem: null\n}; // notice the use of \":\" instead of \"=\"\n\n// to access these items:\nconsole.log( myObject.someNumber );\nconsole.log( myObject.someBool );\n```\n\n#### Functions\n---\n\nFunctions are essentially actions. We use functions to save a set of `instructions` that we can tell javascript to use over and over again. Functions have names, just like variables, but they hold more than just primitive values.\n\n#### Example\n\nThis is a function declaration.\n\n```javascript\nfunction doSomething() {\n\talert('doing something!');\n}\n```\n\nHere is how we would call that function\n```javascript\n// copying over last code snippet for convenience\nfunction doSomething() {\n\talert('doing something!');\n}\n\n// calling it now\ndoSomething();\n```\n\n#### Alternate way to do this\n\n```javascript\nvar doSomething = function() {\n\talert('doing something!');\n}\n\n// call it\ndoSomething();\n```\n\n#### Conditionals\n---\n\nUsed do perform logic\n\n### Rundown\n<a>JavaScript Logical Operators</a>\n<ul>\n    <li>`===`</li>\n    <li>`!==`</li>\n    <li>`>`</li>\n    <li>`<`</li>\n    <li>`>=`</li>\n    <li>`<=`</li>\n    <li>`&&`</li>\n    <li>`||`</li>\n    <li>`!`</li>\n</ul>\n```js\n// Comparison operators\n// you can evaluate a situation by comparing one value in the script\n// to what you expect it might be\n// the result will be a boolean: true or false\n\n/*\n *  the strict equality checking operator\n *  SYMBOL: ===\n */\nvar three = 3;\nvar equalityCheck = ( three === 3 );\nconsole.log( 'three === 3', equalityCheck );\n// note that equalityCheck, and ALL OTHER COMPARISON OPERATORS\n// evaluate to booleans\nconsole.log( 'typeof equalityCheck', typeof equalityCheck );\n\nvar equalityCheck2 = ( three === '3' ); // false because three is Number\n                                       // but '3' is a string\nconsole.log( \"( three === '3' )\", equalityCheck2 );\n// ALWAYS USE THE STRICT EQUALITY OPERATOR!!\n\n/*\n *  the strict NOT EQUAL checking operator\n *  SYMBOL: !==\n */\n\nvar notEqualityCheck = ( three !== 4 ); // should be true\nvar notEqualityCheck2 = ( three !== 3 ); // should be false;\n\nconsole.log( '( three !== 4 )', notEqualityCheck );\nconsole.log( '( three !== 3 )', notEqualityCheck2 );\n\n/*\n *  the greater than operator\n *  SYMBOL: >\n */\nvar greaterThan = ( three > 4 ); // returns false\nvar greaterThan2 = ( three > 2 ); // true\nconsole.log( '( three > 4 )', greaterThan );\nconsole.log( '( three > 2 )', greaterThan2 );\n\n/*\n *  the less than operator\n *  SYMBOL: <\n */\nvar lessThan = ( three < 2 ); // returns false\nvar lessThan2 = ( three < 5 ); // true\nconsole.log( '(three < 2)', lessThan );\nconsole.log( '(three < 5)', lessThan2 );\n \n/*\n *  the greater than or equal to operator\n *  SYMBOL: >=\n */ \nvar greaterThanOrEqualTo = ( three >= 4 ); // false\nvar greaterThanOrEqualTo2 = ( three >= 3 ); // true\nconsole.log( '( three >= 4 )', greaterThanOrEqualTo );\nconsole.log( '( three >= 3 )', greaterThanOrEqualTo2 );\n\n/*\n *  the less than or equal to operator\n *  SYMBOL: <=\n */ \nvar lessThanOrEqualTo = ( three <= 2 ); // false\nvar lessThanOrEqualTo2 = ( three <= 3 ); // true\nconsole.log( '( three <= 2 )', lessThanOrEqualTo );\nconsole.log( '( three <= 3 )', lessThanOrEqualTo2 );\n\n/*\n *  LOGICAL OPERATORS\n *  logical operators allow you to compare the results of more than one\n *  comparison operator\n *  TYPES: '&&', '||'\n */ \n\n/*\n *  the AND operator\n *  SYMBOL: &&\n *  returns true only when both expressions evaluate to true\n */ \nvar andOp = ((2 < 5) && (3 >=2)); // is 2 less than five AND\n                                  // is 3 greater than or equal to 2\nconsole.log( '((2 < 5) && (3 >=2))', andOp );\nconsole.log( 'typeof andOp', andOp );\n// NOTE, we can string together as many ANDs as we need...\n\n/*\n *  the OR operator\n *  SYMBOL: ||\n *  returns true when ONE of the expressions are true\n */ \nvar orOp = ((2 < 5) || (2 < 1)); // if EITHER one of these exprs are true\n                                 // then will evaluate to true\nconsole.log( '((2 < 5) || (2 < 1))', orOp );\n// NOTE, we can string together as many ORs as we need...\n\n/*\n *  the NOT operator\n *  SYMBOL: !\n *  returns opposite of evaluated expression\n */ \nvar notOp = !(2 < 1);\nconsole.log( '!(2 < 1)', notOp );\n\n// Complete example\n\nfunction checkNumber () {\n    \n    var n = prompt(\"Enter a number\", \"5\")\n        , entered = \"You entered a number between\"; \n\n    if (n >= 1 && n < 10) {\n        alert(entered + \" 0 and 10\");\n    }\n    else if (n >= 10 && n < 20) {\n        alert(entered + \" 9 and 20\");\n    }\n    else if (n >= 20 && n < 30) { \n        alert(entered + \" 19 and 30\");\n    }\n    else if (n >= 30 && n < 40) {\n        alert(entered + \" 29 and 40\");\n    }\n    else if (n >= 40 && n <= 100) {\n        alert(entered + \" 39 and 100\");\n    }\n    else if (n < 1 || n > 100) {\n        alert(\"You entered a number less than 1 or greater than 100\");\n    }\n    else {\n        alert(\"You did not enter a number!\");\n      }\n}\n\n\n```\n\n<a>The conditional block</a>\n<ul>\n    <li>the `if` statement</li>\n    <li>the `if/else` statement</li>\n    <li>the `if/else if/else` statement</li>\n</ul>\n```js\n// the if..else statement check a condition\n// if it resolves to true the first code block is run\n// if the condition resolved to false the second code block is run instead\n\nvar pass = 50    // pass mark\n    , score = 75   // current score\n    , msg;   // message\n    \n// select message to write based on score    \nif ( score >= pass ) {     \n    // conditional statement\n    // if code block\n    // anything in here will be run if\n    // the stuff in the (...) evaluates to true\n    msg = \"Congratulations you passed!\";  \n}    \nelse {  // else code block; if the obove is NOT true then...\n    msg = \" Try again :( \";  \n}\n// note this example of how we can use the if/else\n// to set the value of a variable\nconsole.log( msg ); \n\n/*\n *  the if/else if/else block\n */\n\nvar passingGrade;\nif ( score < 50 ) {\n    passingGrade = \"F\";\n}\nelse if ( score < 60 ) {\n    passingGrade = \"D\";\n}\nelse if ( score < 70 ) {\n    passingGrade = \"C\";\n}\nelse if ( score < 80 ) {\n    passingGrade = \"B\";\n}\nelse if ( score < 90 ) {\n    passingGrade = \"A\"\n}\nelse {\n    passingGrade = \"A+\";\n}\n\nconsole.log( \"Your grade is: \", passingGrade );\n\n\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\n```\n","idx":6},"jquery-plugins":{"content":"# jQuery Plugins\n---\n\n**[jQuery](https://jquery.com/)** is a javascript library that we can use to manipulate the HTML on our pages.\n\nWe can use jQuery to do all sorts of things including:\n\n1. animating stuff on our page\n2. handling user interactions like clicks and keypresses\n3. loading data in from other websites like weather APIs or instagram images\n\nPlus, there is a rich ecosystem of **jQuery plugins**, which are ready made UI components that we can reuse on our websites for free.\n\n**[Unheap](unheap.com)** has a great list of jQuery plugins for basically any and all usecaes.\n\n#### Exercise\n---\n\n1. Using jQuery, let's add a keypress listener that tells us when the user has hit the enter key.\n2. Using jQuery, let's add a click listener that tells us when the user has clicked a submit button.\n\n^^^ Using the code above, let's add an input field for soliciting user email address.","idx":7},"common-uis":{"content":"# Common UIs\n---\n\nA few common UI elements we will try to build and use.\n\n#### Slideshow\n---\n\nOur landing page's hero image could theoretically be a slideshow. Let's look at implementing **[slick](http://kenwheeler.github.io/slick/)**\n\n#### Google Maps\n---\n\nLet's get a google map embedded on our page to display location\n\n#### Youtube\n---\n\nLet's promote the product with a demo video, uploaded to Youtube.\n\n#### Analytics\n---\n\nLet's keep track of who is visiting our website with Google Analytics.\n\n#### Email List\n---\n\nLet's embed a MailChimp email list UI to our page for visitors to sign up and keep track of our product updates.\n\n### ???\n---\nAny other cool UI elements you'd like to implement? We can discuss and view examples now.\n\n","idx":8},"__list__":["home","title","desc","warmup","css-review","responsive","programming-basics","jquery-plugins","common-uis"]}